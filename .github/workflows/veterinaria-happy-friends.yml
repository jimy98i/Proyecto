name: Veterinaria Happy Friends

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-produccion:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Build with Docker Compose
        run: |
          # Construir el frontend (React + Vite)
          cd frontend
          docker-compose run --rm frontend npm install
          
          # Instalar sharp localmente y optimizar imágenes
          docker-compose run --rm frontend npm install sharp
          docker-compose run --rm frontend node -e "
            const sharp = require('sharp');
            const fs = require('fs');
            const path = require('path');
            
            const optimizeImage = async (inputPath, outputPath) => {
              try {
                await sharp(inputPath)
                  .jpeg({ quality: 80 })
                  .toFile(outputPath);
                console.log('Optimized:', inputPath);
              } catch (error) {
                console.error('Error optimizing:', inputPath, error);
              }
            };
            
            const processDirectory = async (dir) => {
              const outputDir = dir.replace('assets', 'assets/optimized');
              if (!fs.existsSync(outputDir)) {
                fs.mkdirSync(outputDir, { recursive: true });
              }
              
              const files = fs.readdirSync(dir);
              for (const file of files) {
                if (file.endsWith('.jpg')) {
                  const inputPath = path.join(dir, file);
                  const outputPath = path.join(outputDir, file);
                  await optimizeImage(inputPath, outputPath);
                }
              }
            };
            
            const directories = [
              'src/assets/carrousel',
              'src/assets/fondo',
              'src/assets/personal',
              'src/assets/salas',
              'src/assets/servicios'
            ];
            
            Promise.all(directories.map(processDirectory))
              .then(() => console.log('All images optimized'))
              .catch(console.error);
          "
          
          # Configurar Vite para producción
          echo 'export default {
            build: {
              chunkSizeWarningLimit: 16000,
              rollupOptions: {
                output: {
                  manualChunks: {
                    "react-vendor": ["react", "react-dom", "react-router-dom"],
                    "ui-vendor": ["@mui/material", "@mui/icons-material", "@emotion/react", "@emotion/styled"],
                    "utils-vendor": ["html2canvas", "dompurify"],
                    "styles": ["*.css", "*.scss"],
                    "images": ["*.jpg", "*.png", "*.gif", "*.webp"]
                  }
                }
              }
            }
          }' > vite.config.js
          docker-compose run --rm frontend npm run build
          
          # Mover el build de Vite a la carpeta correcta de Nginx
          mkdir -p ../backend/public/frontend
          cp -r dist/* ../backend/public/frontend/
          
          # Construir el backend (Laravel)
          cd ../backend
          docker-compose run --rm backend composer install --no-dev --optimize-autoloader
          docker-compose run --rm backend php artisan config:clear
          docker-compose run --rm backend php artisan route:clear
          docker-compose run --rm backend php artisan view:clear
          docker-compose run --rm backend php artisan cache:clear
          
          # Configurar Laravel para producción
          docker-compose run --rm backend php artisan key:generate --force
          docker-compose run --rm backend php artisan config:cache
          docker-compose run --rm backend php artisan route:cache
          docker-compose run --rm backend php artisan view:cache
          docker-compose run --rm backend php artisan storage:link
          
          # Volver al directorio raíz y construir los contenedores
          cd ..
          docker-compose build
          docker-compose up -d
          
          # Esperar a que los servicios estén listos
          sleep 30
          
          # Verificar que los contenedores están corriendo
          docker-compose ps
          
          # Verificar que Nginx está sirviendo correctamente
          curl -I http://localhost:80

      - name: Deploy to Production
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Deploying to production..."
          # Aquí puedes agregar los comandos para desplegar en tu servidor de producción
          # Por ejemplo:
          # - Copiar los archivos necesarios
          # - Ejecutar docker-compose en el servidor de producción
      